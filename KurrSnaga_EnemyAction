//These are parts the code that i contributed to the indie game project Kurr Snaga
//It containts the Attack and Block behaviour function, along with animation blending function and root motion implementation function.
//code is rewritten and reorganized from the original source code for protfolio use.




Pathfinding.RVO.RVOController agentController;


IEnumerator Attack()
    {
        finalAttackState = Random.Range(0, 7); //int 1 to 7 repersents 7 different attack animation
        SetWeaponLethal(); // activate weapon collider
        PlaySwingSFX();

        enemyAnimator.SetInteger("State", finalAttackState);
        currentMovementState = MovementState.NotMoving;
        lookAtPlayer.enabled = false;
        agentController.enabled = false;
        CoroutineManager.StartCoroutine(weapon.SetHazardous(attackDelay, attackHazardTime), gameObject);
        yield return new Wait(attackDelay + attackHazardTime);
        yield return new Wait(attackRecovery);
        agentController.enabled = true;
        enemyAnimator.SetInteger("State", 1);

        currentMovementState = MovementState.CombatZone;
        lookAtPlayer.enabled = true;
    }
    
void MovementAnimation()
    {
        enemyVelX = Mathf.SmoothDamp(enemyVelX, Mathf.Clamp(Mathf.Abs(agentController.velocity.x), -0.3f, 0.3f), ref smoothingAnimVelX, Time.deltaTime / animationBlendTime);
        enemyVelY = Mathf.SmoothDamp(enemyVelY, Mathf.Clamp(Mathf.Abs(agentController.velocity.z), -0.3f, 0.6f), ref smoothingAnimVelY, Time.deltaTime / animationBlendTime);

        if (!agentController.enabled)
        {
            enemyVelX = 0f;
            enemyVelY = 0f;
        }

        enemyAnimator.SetFloat("VelocityX", enemyVelX);
        enemyAnimator.SetFloat("VelocityY", enemyVelY);
    }
    
public override void Block()
    {
        blockAnimationPlaying = true;
        base.PlayBlockAnimation();
        AudioManager.instance.PlayOneShot(audioResources.blockEvent, gameObject);
        finalBlockState = Random.Range(200, 203);
        enemyAnimator.SetInteger("State", finalBlockState);
        enemyAnimator.SetTrigger("Parry");
        Debug.Log("Parry trigger set");
    }
    
void PosUpdateAfterRootMotion() // This is a function that syncs 
    {
        Vector3 enemyRootPos;
        //Snapping the Nav Agent position to the mesh position
        enemyRootPos.x = enemyAnimator.transform.position.x;
        enemyRootPos.y = transform.position.y;
        enemyRootPos.z = enemyAnimator.transform.position.z;
        transform.position = enemyRootPos;

        Vector3 enemyMeshTransformPos;
        //Snapping the Mesh position back to the updated Nav Agent position
        enemyMeshTransformPos.x = transform.position.x;
        enemyMeshTransformPos.y = lastPoint.y;
        enemyMeshTransformPos.z = transform.position.z;

        enemyAnimator.transform.position = enemyMeshTransformPos;
        ResetYCheck();
    }

    
