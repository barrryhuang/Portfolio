Shader "FakeIndentation" {
    Properties {
        _highthMap ("highthMap", 2D) = "white" {}
	_Texture("Texture", 2D) = "white" {}
        _ParallaxDepth ("ParallaxDepth", Range(-1, 1)) = -0.5
    }
    SubShader {
        Pass {
            Tags {
                "LightMode"="ForwardBase"
            }
            Blend SrcAlpha OneMinusSrcAlpha
            ZWrite Off
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"
            uniform float4 _LightColor0;
            uniform sampler2D _highthMap;
	    uniform float4 _highthMap_ST;
            uniform sampler2D _Texture;
	    uniform float4 _Texture_ST;
            uniform float _ParallaxDepth;
            struct vInput 
	    {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float2 texcoord0 : TEXCOORD0;
            };
            struct v2f 
	    {
                float4 pos : SV_POSITION;
                float2 uv0 : tSpace0;
                float4 posWorld : tSpace1;
                float3 normalDir : tSpace2;
                float3 tangentDir : tSpace3;
                float3 bitangentDir : tSpace4;
            };
	    
	    //Vertex Shader
	    v2f vert (vInput v)
	    {
		v2f o = (v2f)0;
                o.uv0 = v.texcoord0;
                o.normalDir = UnityObjectToWorldNormal(v.normal);
                o.tangentDir = normalize( mul( unity_ObjectToWorld, float4( v.tangent.xyz, 0.0 ) ).xyz );
                o.bitangentDir = normalize(cross(o.normalDir, o.tangentDir) * v.tangent.w);
                o.posWorld = mul(unity_ObjectToWorld, v.vertex);
                float3 lightColor = _LightColor0.rgb;
                o.pos = UnityObjectToClipPos( v.vertex );
                return o;
            }
	    
	    //Fragment Shader
            float4 frag(v2f i) : SV_target
	    {
                i.normalDir = normalize(i.normalDir);
                float3x3 tangentTransform = float3x3( i.tangentDir, i.bitangentDir, i.normalDir);
                float3 viewDirection = normalize(_WorldSpaceCameraPos.xyz - i.posWorld.xyz);
                float3 normalDirection = i.normalDir;
                float3 lightDirection = normalize(_WorldSpaceLightPos0.xyz);
                float3 lightColor = _LightColor0.rgb;

		//Setup Diffuse
		float attenuation = 1;
		float3 attenColor = attenuation * _LightColor0.xyz;
		float NdotL = max(0.0, dot(normalDirection, lightDirection));
		float3 directDiffuse = max(0.0, NdotL) * attenColor;
                float3 diffuseColor = _Texture_var.rgb;
                float3 diffuse = (directDiffuse) * diffuseColor;

		// Define highthMap variable
		float4 _highthMap_var = tex2D(_highthMap, TRANSFORM_TEX(i.uv0, _highthMap));

		// Setup parallex mapping for the fake indentation effect
		float2 _Parallax = (_ParallaxDepth * ((_highthMap_var.r * 0.5 + 0.5) - 0.5) * mul(tangentTransform, viewDirection).xy + i.uv0);

		// Final Texture variable
		float4 _Texture_var = tex2D(_Texture, TRANSFORM_TEX(_Parallax.rg, _Texture));

                fixed4 finalRGBA = fixed4(diffuse, 1);
                return finalRGBA;
            }
            ENDCG
        }
   
    }
    FallBack "Diffuse"
}
