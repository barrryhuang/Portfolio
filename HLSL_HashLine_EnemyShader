Shader "MotusMan_Enemy"
{
	Properties
	{
		_Color1("Color 1", Color) = (0,0,0,0)
		_Color2("Color 2", Color) = (0,0,0,0)
		_Rimcolor("Rim color", Color) = (0,0,0,0)
		_Emission2Color("Emission 2 Color", Color) = (0,0,0,0)
		_EmissionColor("Emission Color", Color) = (0,0,0,0)
		_Emissionmap("Emission map", 2D) = "white" {}
		_Emissionmap2("Emission map 2", 2D) = "white" {}
		_HeightMap("Height Map", 2D) = "white" {}
		_HeightMap2("Height Map 2", 2D) = "white" {}
		_Emissionmap2strength("Emission map 2 strength", Float) = 0
		_EmissionStrength("Emission Strength", Float) = 0
		_ParallaxHeight("Parallax Height", Float) = 0
		_ParallaxOffest2("Parallax Offest 2", Float) = 0
		_Emission2Tilling("Emission 2 Tilling", Vector) = (0,0,0,0)
		[Toggle]_BrightRim("BrightRim", Float) = 1
		_DarkRimScale("DarkRim Scale", Float) = 0
		_BrightRimScale("BrightRim Scale", Float) = 0
		_DarkRimPower("DarkRim Power", Float) = 0
		_BrightRimPower("BrightRim Power", Float) = 0
		[Toggle]_DarkRim("DarkRim", Float) = 1
		[HideInInspector] _texcoord("", 2D) = "white" {}
		[HideInInspector] __dirty("", Int) = 1
	}

		SubShader
		{
			Tags{ "RenderType" = "Custom"  "Queue" = "AlphaTest+0" "IgnoreProjector" = "True" "IsEmissive" = "true"  }
			Cull Back
			CGINCLUDE
			#include "UnityCG.cginc"
			#include "UnityShaderVariables.cginc"
			#include "UnityPBSLighting.cginc"
			#include "Lighting.cginc"
			#pragma target 3.0
			
			struct Input
			{
				float3 worldPos;
				float3 worldNormal;
				INTERNAL_DATA
				float2 uv_texcoord;
				float3 viewDir;
			};

			uniform float4 _Color1;
			uniform float4 _Color2;
			uniform sampler2D _Emissionmap;
			uniform sampler2D _HeightMap;
			uniform float4 _HeightMap_ST;
			uniform float _ParallaxHeight;
			uniform float4 _EmissionColor;
			uniform float _EmissionStrength;
			uniform sampler2D _Emissionmap2;
			uniform sampler2D _HeightMap2;
			uniform float4 _HeightMap2_ST;
			uniform float _ParallaxOffest2;
			uniform float2 _Emission2Tilling;
			uniform float4 _Emission2Color;
			uniform float _Emissionmap2strength;
			uniform float _DarkRim;
			uniform float _DarkRimScale;
			uniform float _DarkRimPower;
			uniform float _BrightRim;
			uniform float4 _Rimcolor;
			uniform float _BrightRimScale;
			uniform float _BrightRimPower;

			inline half4 LightingUnlit(SurfaceOutput s, half3 lightDir, half atten)
			{
				return half4 (0, 0, 0, s.Alpha);
			}

			void surf(Input i , inout SurfaceOutput o)
			{
				o.Normal = float3(0,0,1);
				float3 worldPos = i.worldPos;
				float3 worldlightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				float3 worldNormal = WorldNormalVector(i, float3(0, 0, 1));
				float dotResult35 = dot(worldlightDir , worldNormal);
				float clampResult43 = clamp(dotResult35 , 0.0 , 1.0);
				float4 lerpResult38 = lerp(_Color1 , _Color2 , clampResult43);
				float2 uv_HeightMap = i.uv_texcoord * _HeightMap_ST.xy + _HeightMap_ST.zw;
				float2 paralaxOffset76 = ParallaxOffset((0.5 + (tex2D(_HeightMap, uv_HeightMap).r - 0.0) * (1.0 - 0.5) / (1.0 - 0.0)) , _ParallaxHeight , i.viewDir);
				float2 uv_HeightMap2 = i.uv_texcoord * _HeightMap2_ST.xy + _HeightMap2_ST.zw;
				float2 paralaxOffset98 = ParallaxOffset((0.5 + (tex2D(_HeightMap2, uv_HeightMap2).r - 0.0) * (1.0 - 0.5) / (1.0 - 0.0)) , _ParallaxOffest2 , i.viewDir);
				float2 uv_TexCoord101 = i.uv_texcoord * _Emission2Tilling;
				float2 panner127 = (1.0 * _Time.y * float2(0.1,0) + uv_TexCoord101);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				float fresnelNdotV106 = dot(worldNormal, worldViewDir);
				float fresnelNode106 = (0.0 + _DarkRimScale * pow(1.0 - fresnelNdotV106, _DarkRimPower));
				float clampResult117 = clamp((1.0 - fresnelNode106) , 0.0 , 999.0);
				float fresnelNdotV40 = dot(worldNormal, worldViewDir);
				float fresnelNode40 = (0.0 + _BrightRimScale * pow(1.0 - fresnelNdotV40, _BrightRimPower));
				o.Emission = (lerpResult38 + ((tex2D(_Emissionmap, (i.uv_texcoord + paralaxOffset76)) * (_EmissionColor * _EmissionStrength)) + ((0.0 + (tex2D(_Emissionmap2, (i.uv_texcoord + paralaxOffset98 + panner127)).r - 0.22) * (3.0 - 0.0) / (1.0 - 0.22)) * (_Emission2Color * _Emissionmap2strength) * lerp(1.0,clampResult117,_DarkRim))) + lerp(float4(0,0,0,0),(_Rimcolor * fresnelNode40),_BrightRim)).rgb;
				o.Alpha = 1;
			}

			ENDCG
			CGPROGRAM
			#pragma surface surf Unlit keepalpha fullforwardshadows noshadow exclude_path:deferred 

			ENDCG
			Pass
			{
				Name "ShadowCaster"
				Tags{ "LightMode" = "ShadowCaster" }
				ZWrite On
				CGPROGRAM
				#pragma vertex vert
				#pragma fragment frag
				#pragma target 3.0
				#pragma multi_compile_shadowcaster
				#pragma multi_compile UNITY_PASS_SHADOWCASTER
				#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
				#include "HLSLSupport.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				#include "UnityPBSLighting.cginc"
				struct v2f
				{
					V2F_SHADOW_CASTER;
					float2 customPack1 : TEXCOORD1;
					float4 tSpace0 : TEXCOORD2;
					float4 tSpace1 : TEXCOORD3;
					float4 tSpace2 : TEXCOORD4;
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};
				//Vertex Shader
				v2f vert(appdata_full v)
				{
					v2f o;
					UNITY_SETUP_INSTANCE_ID(v);
					UNITY_INITIALIZE_OUTPUT(v2f, o);
					UNITY_TRANSFER_INSTANCE_ID(v, o);
					Input customInputData;
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					half3 worldNormal = UnityObjectToWorldNormal(v.normal);
					half3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					half tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					half3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					o.customPack1.xy = customInputData.uv_texcoord;
					o.customPack1.xy = v.texcoord;
					TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
					return o;
				}
				//Pixel(Fragment) Shader
				half4 frag(v2f IN) : SV_Target
				{
					UNITY_SETUP_INSTANCE_ID(IN);
					Input surfIN;
					UNITY_INITIALIZE_OUTPUT(Input, surfIN);
					surfIN.uv_texcoord = IN.customPack1.xy;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					half3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.viewDir = IN.tSpace0.xyz * worldViewDir.x + IN.tSpace1.xyz * worldViewDir.y + IN.tSpace2.xyz * worldViewDir.z;
					surfIN.worldPos = worldPos;
					surfIN.worldNormal = float3(IN.tSpace0.z, IN.tSpace1.z, IN.tSpace2.z);
					surfIN.internalSurfaceTtoW0 = IN.tSpace0.xyz;
					surfIN.internalSurfaceTtoW1 = IN.tSpace1.xyz;
					surfIN.internalSurfaceTtoW2 = IN.tSpace2.xyz;
					SurfaceOutput o;
					UNITY_INITIALIZE_OUTPUT(SurfaceOutput, o)
					surf(surfIN, o)
					SHADOW_CASTER_FRAGMENT(IN)
				}
				ENDCG
			}
		}
			Fallback "Diffuse"
}
